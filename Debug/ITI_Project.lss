
ITI_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  00002998  00002a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001da  008001da  00002ba6  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113f  00000000  00000000  000051d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000630f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000064af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000affc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b4af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_4>
      14:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_9>
      28:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_10>
      2c:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 11 	call	0x221a	; 0x221a <main>
      8a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ed       	ldi	r26, 0xD2	; 210
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ed       	ldi	r24, 0xD2	; 210
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ed       	ldi	r22, 0xD2	; 210
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e6 52       	subi	r30, 0x26	; 38
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <MDIO_voidInit>:
#include "..\Include\LIB\BIT_MATH.h"
#include "..\Include\MCAL\DIO\DIO_Interface.h"
#include "..\Include\MCAL\DIO\DIO_private.h"
#include "..\Include\MCAL\DIO\DIO_Configurations.h"
void MDIO_voidInit(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8e ef       	ldi	r24, 0xFE	; 254
     e06:	80 83       	st	Z, r24
	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	80 83       	st	Z, r24
	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);
     e10:	e4 e3       	ldi	r30, 0x34	; 52
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	80 83       	st	Z, r24
	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	82 eb       	ldi	r24, 0xB2	; 178
     e1e:	80 83       	st	Z, r24
	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8d ef       	ldi	r24, 0xFD	; 253
     e26:	80 83       	st	Z, r24
	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     e28:	e8 e3       	ldi	r30, 0x38	; 56
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	80 83       	st	Z, r24
	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     e30:	e5 e3       	ldi	r30, 0x35	; 53
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 83       	st	Z, r24
	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     e38:	e2 e3       	ldi	r30, 0x32	; 50
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	82 e9       	ldi	r24, 0x92	; 146
     e3e:	80 83       	st	Z, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <MDIO_voidSetPinValue>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
//Value  :- PIN_HIGH - PIN_LOW
void MDIO_voidSetPinValue (u8 A_u8PortId , u8 A_u8PinId , u8 A_u8Value)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	2d 97       	sbiw	r28, 0x0d	; 13
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3d 87       	std	Y+13, r19	; 0x0d
     e68:	2c 87       	std	Y+12, r18	; 0x0c
     e6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <MDIO_voidSetPinValue+0x30>
     e74:	4f c0       	rjmp	.+158    	; 0xf14 <MDIO_voidSetPinValue+0xce>
     e76:	2c 85       	ldd	r18, Y+12	; 0x0c
     e78:	3d 85       	ldd	r19, Y+13	; 0x0d
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	2c f4       	brge	.+10     	; 0xe8a <MDIO_voidSetPinValue+0x44>
     e80:	8c 85       	ldd	r24, Y+12	; 0x0c
     e82:	9d 85       	ldd	r25, Y+13	; 0x0d
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	71 f0       	breq	.+28     	; 0xea4 <MDIO_voidSetPinValue+0x5e>
     e88:	eb c0       	rjmp	.+470    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
     e8a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e8c:	3d 85       	ldd	r19, Y+13	; 0x0d
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <MDIO_voidSetPinValue+0x50>
     e94:	77 c0       	rjmp	.+238    	; 0xf84 <MDIO_voidSetPinValue+0x13e>
     e96:	8c 85       	ldd	r24, Y+12	; 0x0c
     e98:	9d 85       	ldd	r25, Y+13	; 0x0d
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <MDIO_voidSetPinValue+0x5c>
     ea0:	a9 c0       	rjmp	.+338    	; 0xff4 <MDIO_voidSetPinValue+0x1ae>
     ea2:	de c0       	rjmp	.+444    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
	{
	case PORTA :
		switch (A_u8Value)
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3b 87       	std	Y+11, r19	; 0x0b
     eac:	2a 87       	std	Y+10, r18	; 0x0a
     eae:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	d1 f0       	breq	.+52     	; 0xeea <MDIO_voidSetPinValue+0xa4>
     eb6:	2a 85       	ldd	r18, Y+10	; 0x0a
     eb8:	3b 85       	ldd	r19, Y+11	; 0x0b
     eba:	21 30       	cpi	r18, 0x01	; 1
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <MDIO_voidSetPinValue+0x7c>
     ec0:	cf c0       	rjmp	.+414    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTA_REG,A_u8PinId);
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <MDIO_voidSetPinValue+0x9a>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <MDIO_voidSetPinValue+0x96>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	bb c0       	rjmp	.+374    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTA_REG,A_u8PinId);
     eea:	ab e3       	ldi	r26, 0x3B	; 59
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e3       	ldi	r30, 0x3B	; 59
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <MDIO_voidSetPinValue+0xc2>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <MDIO_voidSetPinValue+0xbe>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	a6 c0       	rjmp	.+332    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTB :
		switch (A_u8Value)
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	39 87       	std	Y+9, r19	; 0x09
     f1c:	28 87       	std	Y+8, r18	; 0x08
     f1e:	88 85       	ldd	r24, Y+8	; 0x08
     f20:	99 85       	ldd	r25, Y+9	; 0x09
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	d1 f0       	breq	.+52     	; 0xf5a <MDIO_voidSetPinValue+0x114>
     f26:	28 85       	ldd	r18, Y+8	; 0x08
     f28:	39 85       	ldd	r19, Y+9	; 0x09
     f2a:	21 30       	cpi	r18, 0x01	; 1
     f2c:	31 05       	cpc	r19, r1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <MDIO_voidSetPinValue+0xec>
     f30:	97 c0       	rjmp	.+302    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTB_REG,A_u8PinId);
     f32:	a8 e3       	ldi	r26, 0x38	; 56
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e3       	ldi	r30, 0x38	; 56
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <MDIO_voidSetPinValue+0x10a>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <MDIO_voidSetPinValue+0x106>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	83 c0       	rjmp	.+262    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTB_REG,A_u8PinId);
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <MDIO_voidSetPinValue+0x132>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <MDIO_voidSetPinValue+0x12e>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	6e c0       	rjmp	.+220    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTC :
		switch (A_u8Value)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3f 83       	std	Y+7, r19	; 0x07
     f8c:	2e 83       	std	Y+6, r18	; 0x06
     f8e:	8e 81       	ldd	r24, Y+6	; 0x06
     f90:	9f 81       	ldd	r25, Y+7	; 0x07
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	d1 f0       	breq	.+52     	; 0xfca <MDIO_voidSetPinValue+0x184>
     f96:	2e 81       	ldd	r18, Y+6	; 0x06
     f98:	3f 81       	ldd	r19, Y+7	; 0x07
     f9a:	21 30       	cpi	r18, 0x01	; 1
     f9c:	31 05       	cpc	r19, r1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <MDIO_voidSetPinValue+0x15c>
     fa0:	5f c0       	rjmp	.+190    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTC_REG,A_u8PinId);
     fa2:	a5 e3       	ldi	r26, 0x35	; 53
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e3       	ldi	r30, 0x35	; 53
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <MDIO_voidSetPinValue+0x17a>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <MDIO_voidSetPinValue+0x176>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	4b c0       	rjmp	.+150    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTC_REG,A_u8PinId);
     fca:	a5 e3       	ldi	r26, 0x35	; 53
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e3       	ldi	r30, 0x35	; 53
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <MDIO_voidSetPinValue+0x1a2>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <MDIO_voidSetPinValue+0x19e>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	36 c0       	rjmp	.+108    	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		}
		break;
	case PORTD :
		switch (A_u8Value)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	c9 f0       	breq	.+50     	; 0x1038 <MDIO_voidSetPinValue+0x1f2>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	21 30       	cpi	r18, 0x01	; 1
    100c:	31 05       	cpc	r19, r1
    100e:	41 f5       	brne	.+80     	; 0x1060 <MDIO_voidSetPinValue+0x21a>
		{
		case PIN_HIGH :
			SET_BIT (PORTD_REG,A_u8PinId);
    1010:	a2 e3       	ldi	r26, 0x32	; 50
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <MDIO_voidSetPinValue+0x1e8>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <MDIO_voidSetPinValue+0x1e4>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	14 c0       	rjmp	.+40     	; 0x1060 <MDIO_voidSetPinValue+0x21a>
			break;
		case PIN_LOW :
			CLR_BIT (PORTD_REG,A_u8PinId);
    1038:	a2 e3       	ldi	r26, 0x32	; 50
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e3       	ldi	r30, 0x32	; 50
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <MDIO_voidSetPinValue+0x210>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <MDIO_voidSetPinValue+0x20c>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    1060:	2d 96       	adiw	r28, 0x0d	; 13
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <MDIO_voidSetPinDirection>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
//Value  :- OUTPUT_PIN - INPUT_PIN
void MDIO_voidSetPinDirection (u8 A_u8PortId , u8 A_u8PinId , u8 A_u8Direction)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	2d 97       	sbiw	r28, 0x0d	; 13
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
    108a:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3d 87       	std	Y+13, r19	; 0x0d
    1094:	2c 87       	std	Y+12, r18	; 0x0c
    1096:	8c 85       	ldd	r24, Y+12	; 0x0c
    1098:	9d 85       	ldd	r25, Y+13	; 0x0d
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <MDIO_voidSetPinDirection+0x30>
    10a0:	4f c0       	rjmp	.+158    	; 0x1140 <MDIO_voidSetPinDirection+0xce>
    10a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <MDIO_voidSetPinDirection+0x44>
    10ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <MDIO_voidSetPinDirection+0x5e>
    10b4:	eb c0       	rjmp	.+470    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
    10b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 05       	cpc	r19, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <MDIO_voidSetPinDirection+0x50>
    10c0:	77 c0       	rjmp	.+238    	; 0x11b0 <MDIO_voidSetPinDirection+0x13e>
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	09 f4       	brne	.+2      	; 0x10ce <MDIO_voidSetPinDirection+0x5c>
    10cc:	a9 c0       	rjmp	.+338    	; 0x1220 <MDIO_voidSetPinDirection+0x1ae>
    10ce:	de c0       	rjmp	.+444    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
	{
	case PORTA :
		switch (A_u8Direction)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3b 87       	std	Y+11, r19	; 0x0b
    10d8:	2a 87       	std	Y+10, r18	; 0x0a
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <MDIO_voidSetPinDirection+0xa4>
    10e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    10e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	31 05       	cpc	r19, r1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <MDIO_voidSetPinDirection+0x7c>
    10ec:	cf c0       	rjmp	.+414    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRA_REG,A_u8PinId);
    10ee:	aa e3       	ldi	r26, 0x3A	; 58
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ea e3       	ldi	r30, 0x3A	; 58
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <MDIO_voidSetPinDirection+0x9a>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <MDIO_voidSetPinDirection+0x96>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	bb c0       	rjmp	.+374    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRA_REG,A_u8PinId);
    1116:	aa e3       	ldi	r26, 0x3A	; 58
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <MDIO_voidSetPinDirection+0xc2>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <MDIO_voidSetPinDirection+0xbe>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	a6 c0       	rjmp	.+332    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTB :
		switch (A_u8Direction)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	39 87       	std	Y+9, r19	; 0x09
    1148:	28 87       	std	Y+8, r18	; 0x08
    114a:	88 85       	ldd	r24, Y+8	; 0x08
    114c:	99 85       	ldd	r25, Y+9	; 0x09
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	d1 f0       	breq	.+52     	; 0x1186 <MDIO_voidSetPinDirection+0x114>
    1152:	28 85       	ldd	r18, Y+8	; 0x08
    1154:	39 85       	ldd	r19, Y+9	; 0x09
    1156:	21 30       	cpi	r18, 0x01	; 1
    1158:	31 05       	cpc	r19, r1
    115a:	09 f0       	breq	.+2      	; 0x115e <MDIO_voidSetPinDirection+0xec>
    115c:	97 c0       	rjmp	.+302    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRB_REG,A_u8PinId);
    115e:	a7 e3       	ldi	r26, 0x37	; 55
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e7 e3       	ldi	r30, 0x37	; 55
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <MDIO_voidSetPinDirection+0x10a>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <MDIO_voidSetPinDirection+0x106>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	83 c0       	rjmp	.+262    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRB_REG,A_u8PinId);
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <MDIO_voidSetPinDirection+0x132>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <MDIO_voidSetPinDirection+0x12e>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	6e c0       	rjmp	.+220    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTC :
		switch (A_u8Direction)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3f 83       	std	Y+7, r19	; 0x07
    11b8:	2e 83       	std	Y+6, r18	; 0x06
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	d1 f0       	breq	.+52     	; 0x11f6 <MDIO_voidSetPinDirection+0x184>
    11c2:	2e 81       	ldd	r18, Y+6	; 0x06
    11c4:	3f 81       	ldd	r19, Y+7	; 0x07
    11c6:	21 30       	cpi	r18, 0x01	; 1
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f0       	breq	.+2      	; 0x11ce <MDIO_voidSetPinDirection+0x15c>
    11cc:	5f c0       	rjmp	.+190    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRC_REG,A_u8PinId);
    11ce:	a4 e3       	ldi	r26, 0x34	; 52
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e4 e3       	ldi	r30, 0x34	; 52
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <MDIO_voidSetPinDirection+0x17a>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <MDIO_voidSetPinDirection+0x176>
    11f0:	84 2b       	or	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	4b c0       	rjmp	.+150    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRC_REG,A_u8PinId);
    11f6:	a4 e3       	ldi	r26, 0x34	; 52
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e4 e3       	ldi	r30, 0x34	; 52
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <MDIO_voidSetPinDirection+0x1a2>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <MDIO_voidSetPinDirection+0x19e>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	36 c0       	rjmp	.+108    	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		}
		break;
	case PORTD :
		switch (A_u8Direction)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3d 83       	std	Y+5, r19	; 0x05
    1228:	2c 83       	std	Y+4, r18	; 0x04
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	c9 f0       	breq	.+50     	; 0x1264 <MDIO_voidSetPinDirection+0x1f2>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	21 30       	cpi	r18, 0x01	; 1
    1238:	31 05       	cpc	r19, r1
    123a:	41 f5       	brne	.+80     	; 0x128c <MDIO_voidSetPinDirection+0x21a>
		{
		case OUTPUT_PIN :
			SET_BIT (DDRD_REG,A_u8PinId);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <MDIO_voidSetPinDirection+0x1e8>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <MDIO_voidSetPinDirection+0x1e4>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	14 c0       	rjmp	.+40     	; 0x128c <MDIO_voidSetPinDirection+0x21a>
			break;
		case INPUT_PIN :
			CLR_BIT (DDRD_REG,A_u8PinId);
    1264:	a1 e3       	ldi	r26, 0x31	; 49
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e1 e3       	ldi	r30, 0x31	; 49
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <MDIO_voidSetPinDirection+0x210>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <MDIO_voidSetPinDirection+0x20c>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    128c:	2d 96       	adiw	r28, 0x0d	; 13
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <MDIO_u8GetPinValue>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PinId  :- PIN0 ... PIN7
u8 MDIO_u8GetPinValue (u8 A_u8PortId , u8 A_u8PinId)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <MDIO_u8GetPinValue+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <MDIO_u8GetPinValue+0x8>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue = 0;
    12b0:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortId)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3d 83       	std	Y+5, r19	; 0x05
    12ba:	2c 83       	std	Y+4, r18	; 0x04
    12bc:	4c 81       	ldd	r20, Y+4	; 0x04
    12be:	5d 81       	ldd	r21, Y+5	; 0x05
    12c0:	41 30       	cpi	r20, 0x01	; 1
    12c2:	51 05       	cpc	r21, r1
    12c4:	41 f1       	breq	.+80     	; 0x1316 <MDIO_u8GetPinValue+0x78>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	91 05       	cpc	r25, r1
    12ce:	34 f4       	brge	.+12     	; 0x12dc <MDIO_u8GetPinValue+0x3e>
    12d0:	2c 81       	ldd	r18, Y+4	; 0x04
    12d2:	3d 81       	ldd	r19, Y+5	; 0x05
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <MDIO_u8GetPinValue+0x54>
    12da:	52 c0       	rjmp	.+164    	; 0x1380 <MDIO_u8GetPinValue+0xe2>
    12dc:	4c 81       	ldd	r20, Y+4	; 0x04
    12de:	5d 81       	ldd	r21, Y+5	; 0x05
    12e0:	42 30       	cpi	r20, 0x02	; 2
    12e2:	51 05       	cpc	r21, r1
    12e4:	51 f1       	breq	.+84     	; 0x133a <MDIO_u8GetPinValue+0x9c>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	b9 f1       	breq	.+110    	; 0x135e <MDIO_u8GetPinValue+0xc0>
    12f0:	47 c0       	rjmp	.+142    	; 0x1380 <MDIO_u8GetPinValue+0xe2>
	{
	case PORTA :
		local_u8PinValue = GET_BIT (PINA_REG , A_u8PinId);
    12f2:	e9 e3       	ldi	r30, 0x39	; 57
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <MDIO_u8GetPinValue+0x6c>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <MDIO_u8GetPinValue+0x68>
    130e:	ca 01       	movw	r24, r20
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	35 c0       	rjmp	.+106    	; 0x1380 <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTB :
		local_u8PinValue = GET_BIT (PINB_REG , A_u8PinId);
    1316:	e6 e3       	ldi	r30, 0x36	; 54
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <MDIO_u8GetPinValue+0x90>
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <MDIO_u8GetPinValue+0x8c>
    1332:	ca 01       	movw	r24, r20
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	23 c0       	rjmp	.+70     	; 0x1380 <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTC :
		local_u8PinValue = GET_BIT (PINC_REG , A_u8PinId);
    133a:	e3 e3       	ldi	r30, 0x33	; 51
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <MDIO_u8GetPinValue+0xb4>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <MDIO_u8GetPinValue+0xb0>
    1356:	ca 01       	movw	r24, r20
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	11 c0       	rjmp	.+34     	; 0x1380 <MDIO_u8GetPinValue+0xe2>
		break;
	case PORTD :
		local_u8PinValue = GET_BIT (PIND_REG , A_u8PinId);
    135e:	e0 e3       	ldi	r30, 0x30	; 48
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <MDIO_u8GetPinValue+0xd8>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <MDIO_u8GetPinValue+0xd4>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return local_u8PinValue;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <MDIO_voidSetPortValue>:

//PortId :- PORTA - PORTB - PORTC - PORTD
//PortValue :- u8
void MDIO_voidSetPortValue (u8 A_u8PortId , u8 A_u8PortValue)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <MDIO_voidSetPortValue+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <MDIO_voidSetPortValue+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3c 83       	std	Y+4, r19	; 0x04
    13aa:	2b 83       	std	Y+3, r18	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <MDIO_voidSetPortValue+0x58>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <MDIO_voidSetPortValue+0x38>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <MDIO_voidSetPortValue+0x4e>
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <MDIO_voidSetPortValue+0x74>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <MDIO_voidSetPortValue+0x62>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <MDIO_voidSetPortValue+0x6c>
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <MDIO_voidSetPortValue+0x74>
	{
	case PORTA :
		PORTA_REG = A_u8PortValue;
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTB :
		PORTB_REG = A_u8PortValue;
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTC :
		PORTC_REG = A_u8PortValue;
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <MDIO_voidSetPortValue+0x74>
		break;
	case PORTD :
		PORTD_REG = A_u8PortValue;
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
		break;
	}
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortId , u8 A_u8PortDirection)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <MDIO_voidSetPortDirection+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <MDIO_voidSetPortDirection+0x8>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3c 83       	std	Y+4, r19	; 0x04
    142c:	2b 83       	std	Y+3, r18	; 0x03
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	d1 f0       	breq	.+52     	; 0x146c <MDIO_voidSetPortDirection+0x58>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	2c f4       	brge	.+10     	; 0x144c <MDIO_voidSetPortDirection+0x38>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	61 f0       	breq	.+24     	; 0x1462 <MDIO_voidSetPortDirection+0x4e>
    144a:	1e c0       	rjmp	.+60     	; 0x1488 <MDIO_voidSetPortDirection+0x74>
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3c 81       	ldd	r19, Y+4	; 0x04
    1450:	22 30       	cpi	r18, 0x02	; 2
    1452:	31 05       	cpc	r19, r1
    1454:	81 f0       	breq	.+32     	; 0x1476 <MDIO_voidSetPortDirection+0x62>
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	91 05       	cpc	r25, r1
    145e:	81 f0       	breq	.+32     	; 0x1480 <MDIO_voidSetPortDirection+0x6c>
    1460:	13 c0       	rjmp	.+38     	; 0x1488 <MDIO_voidSetPortDirection+0x74>
	{
	case PORTA :
		DDRA_REG = A_u8PortDirection;
    1462:	ea e3       	ldi	r30, 0x3A	; 58
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	80 83       	st	Z, r24
    146a:	0e c0       	rjmp	.+28     	; 0x1488 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTB :
		DDRB_REG = A_u8PortDirection;
    146c:	e7 e3       	ldi	r30, 0x37	; 55
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 83       	st	Z, r24
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTC :
		DDRC_REG = A_u8PortDirection;
    1476:	e4 e3       	ldi	r30, 0x34	; 52
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	80 83       	st	Z, r24
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <MDIO_voidSetPortDirection+0x74>
		break;
	case PORTD :
		DDRD_REG = A_u8PortDirection;
    1480:	e1 e3       	ldi	r30, 0x31	; 49
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
		break;
	}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_Configurations.h"


void MGI_voidEnable (void)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_FLAG);
    149e:	af e5       	ldi	r26, 0x5F	; 95
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ef e5       	ldi	r30, 0x5F	; 95
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <MGI_voidDisable>:

void MGI_voidDisable (void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_FLAG);
    14ba:	af e5       	ldi	r26, 0x5F	; 95
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e5       	ldi	r30, 0x5F	; 95
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 77       	andi	r24, 0x7F	; 127
    14c6:	8c 93       	st	X, r24
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <HMOTORS_SetSpeedPercentage>:
#include "../Include/MCAL/TIMER2/TIMER2_Interface.h"
#include "../Include/MCAL/TIMER2/TIMER2_private.h"
#include "../Include/MCAL/TIMER2/TIMER2_Configurations.h"

void HMOTORS_SetSpeedPercentage (u8 A_u8Percentage)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <HMOTORS_SetSpeedPercentage+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 A_u8OCR0Val = (u8)(A_u8Percentage*(2.56));
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	aa 27       	eor	r26, r26
    14e2:	97 fd       	sbrc	r25, 7
    14e4:	a0 95       	com	r26
    14e6:	ba 2f       	mov	r27, r26
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	2a e0       	ldi	r18, 0x0A	; 10
    14fa:	37 ed       	ldi	r19, 0xD7	; 215
    14fc:	43 e2       	ldi	r20, 0x23	; 35
    14fe:	50 e4       	ldi	r21, 0x40	; 64
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_voidSetOCR0Value(A_u8OCR0Val);
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	0e 94 c0 0b 	call	0x1780	; 0x1780 <MTIMER0_voidSetOCR0Value>
	MTIMER2_voidSetOCR2Value(A_u8OCR0Val);
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <MTIMER2_voidSetOCR2Value>

}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <HMOTORS_voidTurnLeft>:

void HMOTORS_voidTurnLeft(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN0 , 0);
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN1 , 0);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	63 e0       	ldi	r22, 0x03	; 3
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN0 , 0);
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN1 , 1);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>

}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <HMOTORS_voidTurnRight>:

void HMOTORS_voidTurnRight(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN0 , 0);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN1 , 1);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	63 e0       	ldi	r22, 0x03	; 3
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN0 , 0);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN1 , 0);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	61 e0       	ldi	r22, 0x01	; 1
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>

}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <HMOTORS_voidTurnUp>:

void HMOTORS_voidTurnUp(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN0 , 0);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN1 , 1);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN0 , 0);
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN1 , 1);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>

}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <HMOTORS_voidTurnDown>:

void HMOTORS_voidTurnDown(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN0 , 1);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	62 e0       	ldi	r22, 0x02	; 2
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN1 , 0);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN0 , 1);
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN1 , 0);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>

}
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <HMOTORS_voidStop>:

void HMOTORS_voidStop(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN0 , 0);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , LEFTMOTORS_PIN1 , 0);
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	63 e0       	ldi	r22, 0x03	; 3
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN0 , 0);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(MOTORS_PORT , RIGHTMOTORS_PIN1 , 0);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <HSERVO_voidSetAngle>:
#include "../Include/HAL/SERVO/SERVO_Interface.h"
#include "../Include/HAL/SERVO/SERVO_private.h"
#include "../Include/HAL/SERVO/SERVO_Configurations.h"

void HSERVO_voidSetAngle (s16 A_s16Angle)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <HSERVO_voidSetAngle+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <HSERVO_voidSetAngle+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
	s16 OCRVal = 1500 + (s16)(A_s16Angle*11.11);
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	aa 27       	eor	r26, r26
    1654:	97 fd       	sbrc	r25, 7
    1656:	a0 95       	com	r26
    1658:	ba 2f       	mov	r27, r26
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	2f e8       	ldi	r18, 0x8F	; 143
    166c:	32 ec       	ldi	r19, 0xC2	; 194
    166e:	41 e3       	ldi	r20, 0x31	; 49
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	84 52       	subi	r24, 0x24	; 36
    1688:	9a 4f       	sbci	r25, 0xFA	; 250
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	MTIMER_voidSetOCR1B(OCRVal);
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <MTIMER_voidSetOCR1B>
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <MTIMER0_voidInit>:

void (*TIMER0_OVF_CallBack) (void) = NULL;
void (*TIMER0_CTC_CallBack) (void) = NULL;

void MTIMER0_voidInit (void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(THREE_BIT_MASK<<CS_B0);
	//Select CLK Source
	TCCR0 |= (CLK0_CONFIG<<CS_B0);
#elif TIMER0_MODE == FAST_PWM_MODE
	//Select TIMER0 Mode
	SET_BIT(TCCR0 , WGM00);
    16ac:	a3 e5       	ldi	r26, 0x53	; 83
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e3 e5       	ldi	r30, 0x53	; 83
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 60       	ori	r24, 0x08	; 8
    16b8:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , WGM01);
    16ba:	a3 e5       	ldi	r26, 0x53	; 83
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e3 e5       	ldi	r30, 0x53	; 83
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 64       	ori	r24, 0x40	; 64
    16c6:	8c 93       	st	X, r24
	//Select Compare Match Output Mode
	TCCR0 &= ~(TWO_BIT_MASK<<COM0_B0);
    16c8:	a3 e5       	ldi	r26, 0x53	; 83
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e3 e5       	ldi	r30, 0x53	; 83
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 7c       	andi	r24, 0xCF	; 207
    16d4:	8c 93       	st	X, r24
	TCCR0 |= (OC0_MODE_PWM<<COM0_B0);
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 62       	ori	r24, 0x20	; 32
    16e2:	8c 93       	st	X, r24
	OCR0 = OCR0_VALUE;
    16e4:	ec e5       	ldi	r30, 0x5C	; 92
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	10 82       	st	Z, r1
	//Clear CLK Bits
	TCCR0 &= ~(THREE_BIT_MASK<<CS_B0);
    16ea:	a3 e5       	ldi	r26, 0x53	; 83
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e3 e5       	ldi	r30, 0x53	; 83
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	88 7f       	andi	r24, 0xF8	; 248
    16f6:	8c 93       	st	X, r24
	//Select CLK Source
	TCCR0 |= (CLK0_CONFIG<<CS_B0);
    16f8:	a3 e5       	ldi	r26, 0x53	; 83
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e3 e5       	ldi	r30, 0x53	; 83
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	85 60       	ori	r24, 0x05	; 5
    1704:	8c 93       	st	X, r24
#else
	#error  Wrong TIMER0 Mode Configuration
#endif

}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <MTIMER0_voidSetPreLoadValue>:

void MTIMER0_voidSetPreLoadValue (u8 A_u8PreLoadValue)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreLoadValue;
    1718:	e2 e5       	ldi	r30, 0x52	; 82
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	80 83       	st	Z, r24
}
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <MTIMER0_voidSetCallBackOVF>:
void MTIMER0_voidSetCallBackOVF (void (*Ptr_Function)(void))
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <MTIMER0_voidSetCallBackOVF+0x6>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	31 f0       	breq	.+12     	; 0x174a <MTIMER0_voidSetCallBackOVF+0x22>
	{
		TIMER0_OVF_CallBack = Ptr_Function;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	90 93 db 01 	sts	0x01DB, r25
    1746:	80 93 da 01 	sts	0x01DA, r24
	}
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <MTIMER0_voidSetCallBackCTC>:
void MTIMER0_voidSetCallBackCTC (void (*Ptr_Function)(void))
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <MTIMER0_voidSetCallBackCTC+0x6>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	31 f0       	breq	.+12     	; 0x1776 <MTIMER0_voidSetCallBackCTC+0x22>
	{
		TIMER0_CTC_CallBack = Ptr_Function;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	90 93 dd 01 	sts	0x01DD, r25
    1772:	80 93 dc 01 	sts	0x01DC, r24
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    178c:	ec e5       	ldi	r30, 0x5C	; 92
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	80 83       	st	Z, r24
}
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <MTIMER0_voidStopClock>:

void MTIMER0_voidStopClock (void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
	//Clear CLK Bits
	TCCR0 &= ~(THREE_BIT_MASK<<CS_B0);
    17a4:	a3 e5       	ldi	r26, 0x53	; 83
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e3 e5       	ldi	r30, 0x53	; 83
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	88 7f       	andi	r24, 0xF8	; 248
    17b0:	8c 93       	st	X, r24
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <__vector_11>:

void __vector_11 (void)  __attribute__ ((signal));
void __vector_11 (void)
{
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	2f 93       	push	r18
    17c4:	3f 93       	push	r19
    17c6:	4f 93       	push	r20
    17c8:	5f 93       	push	r21
    17ca:	6f 93       	push	r22
    17cc:	7f 93       	push	r23
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
    17d2:	af 93       	push	r26
    17d4:	bf 93       	push	r27
    17d6:	ef 93       	push	r30
    17d8:	ff 93       	push	r31
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CallBack!= NULL)
    17e2:	80 91 da 01 	lds	r24, 0x01DA
    17e6:	90 91 db 01 	lds	r25, 0x01DB
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <__vector_11+0x40>
	{
		TIMER0_OVF_CallBack();
    17ee:	e0 91 da 01 	lds	r30, 0x01DA
    17f2:	f0 91 db 01 	lds	r31, 0x01DB
    17f6:	09 95       	icall
	}
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_10>:

void __vector_10 (void)  __attribute__ ((signal));
void __vector_10 (void)
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	2f 93       	push	r18
    182a:	3f 93       	push	r19
    182c:	4f 93       	push	r20
    182e:	5f 93       	push	r21
    1830:	6f 93       	push	r22
    1832:	7f 93       	push	r23
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	af 93       	push	r26
    183a:	bf 93       	push	r27
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CallBack!= NULL)
    1848:	80 91 dc 01 	lds	r24, 0x01DC
    184c:	90 91 dd 01 	lds	r25, 0x01DD
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	29 f0       	breq	.+10     	; 0x185e <__vector_10+0x40>
	{
		TIMER0_CTC_CallBack();
    1854:	e0 91 dc 01 	lds	r30, 0x01DC
    1858:	f0 91 dd 01 	lds	r31, 0x01DD
    185c:	09 95       	icall
	}
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <MTIMER_voidSetEdgeForICU>:
#include "../Include/MCAL/TIMER1/TIMER1_Interface.h"
#include "../Include/MCAL/TIMER1/TIMER1_private.h"
#include "../Include/MCAL/TIMER1/TIMER1_Configurations.h"
void (*TIMER1_OVF_CallBack) (void) = 0;
void MTIMER_voidSetEdgeForICU (u8 A_u8Edge)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
	if (A_u8Edge == FALLINGEDGE)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 23       	and	r24, r24
    1894:	41 f4       	brne	.+16     	; 0x18a6 <MTIMER_voidSetEdgeForICU+0x22>
	{
		CLR_BIT(TCCR1B , ICES1);
    1896:	ae e4       	ldi	r26, 0x4E	; 78
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ee e4       	ldi	r30, 0x4E	; 78
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8f 7b       	andi	r24, 0xBF	; 191
    18a2:	8c 93       	st	X, r24
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <MTIMER_voidSetEdgeForICU+0x30>
	}
	else
	{
		SET_BIT(TCCR1B , ICES1);
    18a6:	ae e4       	ldi	r26, 0x4E	; 78
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 64       	ori	r24, 0x40	; 64
    18b2:	8c 93       	st	X, r24

	}
}
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <MTIMER_u16GetICR1Value>:

u16 MTIMER_u16GetICR1Value (void)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <MTIMER_u16GetICR1Value+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16ICR1 = ICR1;
    18c6:	e6 e4       	ldi	r30, 0x46	; 70
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT (TIFR , ICF1);
    18d2:	a8 e5       	ldi	r26, 0x58	; 88
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e5       	ldi	r30, 0x58	; 88
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	80 62       	ori	r24, 0x20	; 32
    18de:	8c 93       	st	X, r24
	return local_u16ICR1;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <MTIMER1_voidInit>:
void MTIMER1_voidInit (void)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	//Clear Compare OutPut Mode Bits
	TCCR1A &= ~(TWO_BIT_MASK<<COM1A_B1);
    18f6:	af e4       	ldi	r26, 0x4F	; 79
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ef e4       	ldi	r30, 0x4F	; 79
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8f 73       	andi	r24, 0x3F	; 63
    1902:	8c 93       	st	X, r24
	TCCR1A &= ~(TWO_BIT_MASK<<COM1B_B1);
    1904:	af e4       	ldi	r26, 0x4F	; 79
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ef e4       	ldi	r30, 0x4F	; 79
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8f 7c       	andi	r24, 0xCF	; 207
    1910:	8c 93       	st	X, r24
	//Select Compare OutPut Mode
	TCCR1A |= (COM1A_MODE<<COM1A_B1);
    1912:	af e4       	ldi	r26, 0x4F	; 79
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ef e4       	ldi	r30, 0x4F	; 79
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	8c 93       	st	X, r24
	TCCR1A |= (COM1B_MODE<<COM1B_B1);
    191e:	af e4       	ldi	r26, 0x4F	; 79
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ef e4       	ldi	r30, 0x4F	; 79
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 62       	ori	r24, 0x20	; 32
    192a:	8c 93       	st	X, r24
	//Clear Wave Generation Mode First Two Bits
	TCCR1A &= ~(TWO_BIT_MASK<<WGM_B1);
    192c:	af e4       	ldi	r26, 0x4F	; 79
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ef e4       	ldi	r30, 0x4F	; 79
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8c 7f       	andi	r24, 0xFC	; 252
    1938:	8c 93       	st	X, r24
	//Set Wave Generation Mode First Two Bits
	TCCR1A |= ((TIMER1_MODE&TWO_BIT_MASK)<<WGM_B1);
    193a:	af e4       	ldi	r26, 0x4F	; 79
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ef e4       	ldi	r30, 0x4F	; 79
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	83 60       	ori	r24, 0x03	; 3
    1946:	8c 93       	st	X, r24
	//Clear Wave Generation Mode Last Two Bits
	TCCR1B &= ~(TWO_BIT_MASK<<WGM_B3);
    1948:	ae e4       	ldi	r26, 0x4E	; 78
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ee e4       	ldi	r30, 0x4E	; 78
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	87 7e       	andi	r24, 0xE7	; 231
    1954:	8c 93       	st	X, r24
	//Set Wave Generation Mode Last Two Bits
	TCCR1B |=  ((TIMER1_MODE>>2)<<WGM_B3);
    1956:	ae e4       	ldi	r26, 0x4E	; 78
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	ee e4       	ldi	r30, 0x4E	; 78
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	88 61       	ori	r24, 0x18	; 24
    1962:	8c 93       	st	X, r24
	//Set The Initial Values of OCR1A & OCR1B
	OCR1A = OC1A_VALUE;
    1964:	ea e4       	ldi	r30, 0x4A	; 74
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	9e e4       	ldi	r25, 0x4E	; 78
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
	OCR1B = OC1B_VALUE;
    1970:	e8 e4       	ldi	r30, 0x48	; 72
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 ed       	ldi	r24, 0xD0	; 208
    1976:	97 e0       	ldi	r25, 0x07	; 7
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
	//Set The Initial Value of ICR1
	ICR1 = ICR1_VALUE;
    197c:	e6 e4       	ldi	r30, 0x46	; 70
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	11 82       	std	Z+1, r1	; 0x01
    1982:	10 82       	st	Z, r1
	//Enable Or Disable The Interrupt Flags
#if (INPUT_CAPUTRE_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , TICIE1);
#else
	CLR_BIT(TIMSK , TICIE1);
    1984:	a9 e5       	ldi	r26, 0x59	; 89
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e9 e5       	ldi	r30, 0x59	; 89
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 7d       	andi	r24, 0xDF	; 223
    1990:	8c 93       	st	X, r24
#endif
#if (OUTPUT_COMPARE_A_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , OCIE1A);
#else
	CLR_BIT(TIMSK , OCIE1A);
    1992:	a9 e5       	ldi	r26, 0x59	; 89
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e9 e5       	ldi	r30, 0x59	; 89
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 7e       	andi	r24, 0xEF	; 239
    199e:	8c 93       	st	X, r24
#endif
#if (OUTPUT_COMPARE_B_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , OCIE1B);
#else
	CLR_BIT(TIMSK , OCIE1B);
    19a0:	a9 e5       	ldi	r26, 0x59	; 89
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e9 e5       	ldi	r30, 0x59	; 89
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	87 7f       	andi	r24, 0xF7	; 247
    19ac:	8c 93       	st	X, r24
#endif
#if (OVER_FLOW_INTERRUPT_ENABLE == 1)
	SET_BIT(TIMSK , TOIE1);
    19ae:	a9 e5       	ldi	r26, 0x59	; 89
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e9 e5       	ldi	r30, 0x59	; 89
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	8c 93       	st	X, r24
#else
	CLR_BIT(TIMSK , TOIE1);
#endif
	//Set The Clock OF TIMER1
	TCCR1B &= ~(THREE_BIT_MASK<<CS1_B1);
    19bc:	ae e4       	ldi	r26, 0x4E	; 78
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ee e4       	ldi	r30, 0x4E	; 78
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	88 7f       	andi	r24, 0xF8	; 248
    19c8:	8c 93       	st	X, r24
	TCCR1B |= (CLK1_CONFIG<<CS1_B1);
    19ca:	ae e4       	ldi	r26, 0x4E	; 78
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ee e4       	ldi	r30, 0x4E	; 78
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	82 60       	ori	r24, 0x02	; 2
    19d6:	8c 93       	st	X, r24
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <MTIMER1_voidSetICR1>:



void MTIMER1_voidSetICR1 (u16 A_u16ICR1Value)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <MTIMER1_voidSetICR1+0x6>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = A_u16ICR1Value;
    19ec:	e6 e4       	ldi	r30, 0x46	; 70
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <MTIMER_voidSetOCR1A>:

void MTIMER_voidSetOCR1A (u16 A_u16OCR1AValue)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <MTIMER_voidSetOCR1A+0x6>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16OCR1AValue;
    1a10:	ea e4       	ldi	r30, 0x4A	; 74
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <MTIMER_voidSetOCR1B>:

void MTIMER_voidSetOCR1B (u16 A_u16OCR1BValue)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <MTIMER_voidSetOCR1B+0x6>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = A_u16OCR1BValue;
    1a34:	e8 e4       	ldi	r30, 0x48	; 72
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <MTIMER1_voidSetCallBackOVF>:

void MTIMER1_voidSetCallBackOVF (void (*Ptr_Function)(void))
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <MTIMER1_voidSetCallBackOVF+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != 0)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <MTIMER1_voidSetCallBackOVF+0x22>
	{
		TIMER1_OVF_CallBack = Ptr_Function;
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	90 93 df 01 	sts	0x01DF, r25
    1a68:	80 93 de 01 	sts	0x01DE, r24
	}
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <MTIMER1_voidStopClock>:
void MTIMER1_voidStopClock (void)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(THREE_BIT_MASK<<CS1_B1);
    1a7e:	ae e4       	ldi	r26, 0x4E	; 78
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ee e4       	ldi	r30, 0x4E	; 78
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 7f       	andi	r24, 0xF8	; 248
    1a8a:	8c 93       	st	X, r24
}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <__vector_9>:

void __vector_9 (void)  __attribute__ ((signal));
void __vector_9 (void)
{
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	0f 92       	push	r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	2f 93       	push	r18
    1a9e:	3f 93       	push	r19
    1aa0:	4f 93       	push	r20
    1aa2:	5f 93       	push	r21
    1aa4:	6f 93       	push	r22
    1aa6:	7f 93       	push	r23
    1aa8:	8f 93       	push	r24
    1aaa:	9f 93       	push	r25
    1aac:	af 93       	push	r26
    1aae:	bf 93       	push	r27
    1ab0:	ef 93       	push	r30
    1ab2:	ff 93       	push	r31
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_OVF_CallBack!= 0)
    1abc:	80 91 de 01 	lds	r24, 0x01DE
    1ac0:	90 91 df 01 	lds	r25, 0x01DF
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <__vector_9+0x40>
	{
		TIMER1_OVF_CallBack();
    1ac8:	e0 91 de 01 	lds	r30, 0x01DE
    1acc:	f0 91 df 01 	lds	r31, 0x01DF
    1ad0:	09 95       	icall
	}
}
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <MTIMER2_voidInit>:

void (*TIMER2_OVF_CallBack) (void) = NULL;
void (*TIMER2_CTC_CallBack) (void) = NULL;

void MTIMER2_voidInit (void)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= ~(THREE_BIT_MASK<<CS2_B0);
	//Select CLK Source
	TCCR2 |= (CLK2_CONFIG<<CS2_B0);
#elif TIMER2_MODE == FAST_PWM_MODE
	//Select TIMER2 Mode
	SET_BIT(TCCR2 , WGM20);
    1b00:	a5 e4       	ldi	r26, 0x45	; 69
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e4       	ldi	r30, 0x45	; 69
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	8c 93       	st	X, r24
	SET_BIT(TCCR2 , WGM21);
    1b0e:	a5 e4       	ldi	r26, 0x45	; 69
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e4       	ldi	r30, 0x45	; 69
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	88 60       	ori	r24, 0x08	; 8
    1b1a:	8c 93       	st	X, r24
	//Select Compare Match Output Mode
	TCCR2 &= ~(TWO_BIT_MASK<<COM2_B0);
    1b1c:	a5 e4       	ldi	r26, 0x45	; 69
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e4       	ldi	r30, 0x45	; 69
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 7c       	andi	r24, 0xCF	; 207
    1b28:	8c 93       	st	X, r24
	TCCR2 |= (OC2_MODE_PWM<<COM2_B0);
    1b2a:	a5 e4       	ldi	r26, 0x45	; 69
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e4       	ldi	r30, 0x45	; 69
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 62       	ori	r24, 0x20	; 32
    1b36:	8c 93       	st	X, r24
	OCR2 = OCR2_VALUE;
    1b38:	e3 e4       	ldi	r30, 0x43	; 67
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	10 82       	st	Z, r1
	//Clear CLK Bits
	TCCR2 &= ~(THREE_BIT_MASK<<CS2_B0);
    1b3e:	a5 e4       	ldi	r26, 0x45	; 69
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e4       	ldi	r30, 0x45	; 69
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 7f       	andi	r24, 0xF8	; 248
    1b4a:	8c 93       	st	X, r24
	//Select CLK Source
	TCCR2 |= (CLK2_CONFIG<<CS2_B0);
    1b4c:	a5 e4       	ldi	r26, 0x45	; 69
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e4       	ldi	r30, 0x45	; 69
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	87 60       	ori	r24, 0x07	; 7
    1b58:	8c 93       	st	X, r24
#else
	#error  Wrong TIMER2 Mode Configuration
#endif

}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <MTIMER2_voidSetPreLoadValue>:

void MTIMER2_voidSetPreLoadValue (u8 A_u8PreLoadValue)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	0f 92       	push	r0
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = A_u8PreLoadValue;
    1b6c:	e4 e4       	ldi	r30, 0x44	; 68
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	80 83       	st	Z, r24
}
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <MTIMER2_voidSetCallBackOVF>:
void MTIMER2_voidSetCallBackOVF (void (*Ptr_Function)(void))
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <MTIMER2_voidSetCallBackOVF+0x6>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	31 f0       	breq	.+12     	; 0x1b9e <MTIMER2_voidSetCallBackOVF+0x22>
	{
		TIMER2_OVF_CallBack = Ptr_Function;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	90 93 e1 01 	sts	0x01E1, r25
    1b9a:	80 93 e0 01 	sts	0x01E0, r24
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <MTIMER2_voidSetCallBackCTC>:
void MTIMER2_voidSetCallBackCTC (void (*Ptr_Function)(void))
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <MTIMER2_voidSetCallBackCTC+0x6>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr_Function != NULL)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	31 f0       	breq	.+12     	; 0x1bca <MTIMER2_voidSetCallBackCTC+0x22>
	{
		TIMER2_CTC_CallBack = Ptr_Function;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	90 93 e3 01 	sts	0x01E3, r25
    1bc6:	80 93 e2 01 	sts	0x01E2, r24
	}
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <MTIMER2_voidSetOCR2Value>:

void MTIMER2_voidSetOCR2Value (u8 A_u8OCR2Value)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = A_u8OCR2Value;
    1be0:	e3 e4       	ldi	r30, 0x43	; 67
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	80 83       	st	Z, r24
}
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <MTIMER2_voidStopClock>:

void MTIMER2_voidStopClock (void)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	//Clear CLK Bits
	TCCR2 &= ~(THREE_BIT_MASK<<CS2_B0);
    1bf8:	a5 e4       	ldi	r26, 0x45	; 69
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e5 e4       	ldi	r30, 0x45	; 69
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 7f       	andi	r24, 0xF8	; 248
    1c04:	8c 93       	st	X, r24
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <__vector_5>:

void __vector_5 (void)  __attribute__ ((signal));
void __vector_5 (void)
{
    1c0c:	1f 92       	push	r1
    1c0e:	0f 92       	push	r0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	0f 92       	push	r0
    1c14:	11 24       	eor	r1, r1
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_OVF_CallBack!= NULL)
    1c36:	80 91 e0 01 	lds	r24, 0x01E0
    1c3a:	90 91 e1 01 	lds	r25, 0x01E1
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	29 f0       	breq	.+10     	; 0x1c4c <__vector_5+0x40>
	{
		TIMER2_OVF_CallBack();
    1c42:	e0 91 e0 01 	lds	r30, 0x01E0
    1c46:	f0 91 e1 01 	lds	r31, 0x01E1
    1c4a:	09 95       	icall
	}
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_4>:

void __vector_4 (void)  __attribute__ ((signal));
void __vector_4 (void)
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_CTC_CallBack!= NULL)
    1c9c:	80 91 e2 01 	lds	r24, 0x01E2
    1ca0:	90 91 e3 01 	lds	r25, 0x01E3
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <__vector_4+0x40>
	{
		TIMER2_CTC_CallBack();
    1ca8:	e0 91 e2 01 	lds	r30, 0x01E2
    1cac:	f0 91 e3 01 	lds	r31, 0x01E3
    1cb0:	09 95       	icall
	}
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <MUART_voidInit>:
#include "..\Include\MCAL\UART\UART_Configurations.h"



void MUART_voidInit (void)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
#if (DOUBLE_SPEED == ON)
		SET_BIT (UCSRA , U2X);
#else
		CLR_BIT (UCSRA , U2X);
    1ce0:	ab e2       	ldi	r26, 0x2B	; 43
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	eb e2       	ldi	r30, 0x2B	; 43
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8d 7f       	andi	r24, 0xFD	; 253
    1cec:	8c 93       	st	X, r24
#elif (PARITY_MODE == ODD_PARITY)
	#define UPM0_VALUE		1
	#define UPM1_VALUE		1
#endif

		UCSRB = CONC_BIT(RX_COMPLETE_INTERRUPT,TX_COMPLETE_INTERRUPT,DATA_REGISTER_EMPTY_INTERRUPT,RECEIVER_ENABLE,TRANSMITTER_ENABLE,USCZ2_VALUE,0,0);
    1cee:	ea e2       	ldi	r30, 0x2A	; 42
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	88 e1       	ldi	r24, 0x18	; 24
    1cf4:	80 83       	st	Z, r24
		UCSRC = CONC_BIT(1,UART_MODE,UPM1_VALUE,UPM0_VALUE,STOP_BIT_SELECT,USCZ1_VALUE,USCZ0_VALUE,CLK_POLARITY);
    1cf6:	e0 e4       	ldi	r30, 0x40	; 64
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	86 e8       	ldi	r24, 0x86	; 134
    1cfc:	80 83       	st	Z, r24
		UBRRL = (u8) UBRR;
    1cfe:	e9 e2       	ldi	r30, 0x29	; 41
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	83 e3       	ldi	r24, 0x33	; 51
    1d04:	80 83       	st	Z, r24
		UBRRH = (u8) (UBRR>>8);
    1d06:	e0 e4       	ldi	r30, 0x40	; 64
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	10 82       	st	Z, r1

}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <MUART_voidSendSyncBlocking>:

void MUART_voidSendSyncBlocking (u8 A_u8Data)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA , UDRE)==0);
    1d1e:	eb e2       	ldi	r30, 0x2B	; 43
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	82 95       	swap	r24
    1d26:	86 95       	lsr	r24
    1d28:	87 70       	andi	r24, 0x07	; 7
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	a1 f3       	breq	.-24     	; 0x1d1e <MUART_voidSendSyncBlocking+0xc>
	UDR = A_u8Data;
    1d36:	ec e2       	ldi	r30, 0x2C	; 44
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	80 83       	st	Z, r24
	while (GET_BIT(UCSRA , UDRE)==0);
    1d3e:	eb e2       	ldi	r30, 0x2B	; 43
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	82 95       	swap	r24
    1d46:	86 95       	lsr	r24
    1d48:	87 70       	andi	r24, 0x07	; 7
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	81 70       	andi	r24, 0x01	; 1
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	a1 f3       	breq	.-24     	; 0x1d3e <MUART_voidSendSyncBlocking+0x2c>
	SET_BIT(UCSRA , TXC);
    1d56:	ab e2       	ldi	r26, 0x2B	; 43
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	eb e2       	ldi	r30, 0x2B	; 43
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24
}
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <MUART_voidSendSyncNoBlocking>:


void MUART_voidSendSyncNoBlocking (u8 A_u8Data)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <MUART_voidSendSyncNoBlocking+0x6>
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timer = 0;
    1d7a:	1a 82       	std	Y+2, r1	; 0x02
    1d7c:	19 82       	std	Y+1, r1	; 0x01
    1d7e:	05 c0       	rjmp	.+10     	; 0x1d8a <MUART_voidSendSyncNoBlocking+0x1e>
	while (GET_BIT(UCSRA , UDRE)==0)
	{
		local_u16Timer ++;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01


void MUART_voidSendSyncNoBlocking (u8 A_u8Data)
{
	u16 local_u16Timer = 0;
	while (GET_BIT(UCSRA , UDRE)==0)
    1d8a:	eb e2       	ldi	r30, 0x2B	; 43
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 95       	swap	r24
    1d92:	86 95       	lsr	r24
    1d94:	87 70       	andi	r24, 0x07	; 7
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	81 70       	andi	r24, 0x01	; 1
    1d9c:	90 70       	andi	r25, 0x00	; 0
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	79 f3       	breq	.-34     	; 0x1d80 <MUART_voidSendSyncNoBlocking+0x14>
			break;
		}
	}
	if (local_u16Timer != TIME_OUT)
	{
		local_u16Timer = 0;
    1da2:	1a 82       	std	Y+2, r1	; 0x02
    1da4:	19 82       	std	Y+1, r1	; 0x01
		UDR = A_u8Data;
    1da6:	ec e2       	ldi	r30, 0x2C	; 44
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	80 83       	st	Z, r24
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <MUART_voidSendSyncNoBlocking+0x4e>
		while (GET_BIT(UCSRA , TXC)==0)
		{
			local_u16Timer ++;
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
	}
	if (local_u16Timer != TIME_OUT)
	{
		local_u16Timer = 0;
		UDR = A_u8Data;
		while (GET_BIT(UCSRA , TXC)==0)
    1dba:	eb e2       	ldi	r30, 0x2B	; 43
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 95       	swap	r24
    1dc2:	86 95       	lsr	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	83 70       	andi	r24, 0x03	; 3
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	71 f3       	breq	.-36     	; 0x1db0 <MUART_voidSendSyncNoBlocking+0x44>
			if (local_u16Timer == TIME_OUT)
			{
				break;
			}
		}
		SET_BIT(UCSRA , TXC);
    1dd4:	ab e2       	ldi	r26, 0x2B	; 43
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e2       	ldi	r30, 0x2B	; 43
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	8c 93       	st	X, r24
	}
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <MUART_voidSendAsync>:

void MUART_voidSendAsync (u8 A_u8Data)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	0f 92       	push	r0
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	89 83       	std	Y+1, r24	; 0x01
	UDR = A_u8Data;
    1dfa:	ec e2       	ldi	r30, 0x2C	; 44
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	80 83       	st	Z, r24
}
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <MUART_u8ReadSyncBlocking>:


u8 MUART_u8ReadSyncBlocking (void)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	0f 92       	push	r0
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data = NO_READING;
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA , RXC)==0);
    1e18:	eb e2       	ldi	r30, 0x2B	; 43
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	88 23       	and	r24, r24
    1e20:	dc f7       	brge	.-10     	; 0x1e18 <MUART_u8ReadSyncBlocking+0xe>
	local_u8Data = UDR;
    1e22:	ec e2       	ldi	r30, 0x2C	; 44
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	89 83       	std	Y+1, r24	; 0x01
	return local_u8Data;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <MUART_u8ReadSyncNoBlocking>:


u8 MUART_u8ReadSyncNoBlocking (void)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <MUART_u8ReadSyncNoBlocking+0x6>
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data = NO_READING;
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timer = 0;
    1e44:	1a 82       	std	Y+2, r1	; 0x02
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <MUART_u8ReadSyncNoBlocking+0x20>
	while (GET_BIT(UCSRA , RXC)==0)
	{
		local_u16Timer ++;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01

u8 MUART_u8ReadSyncNoBlocking (void)
{
	u8 local_u8Data = NO_READING;
	u16 local_u16Timer = 0;
	while (GET_BIT(UCSRA , RXC)==0)
    1e54:	eb e2       	ldi	r30, 0x2B	; 43
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	b4 f7       	brge	.-20     	; 0x1e4a <MUART_u8ReadSyncNoBlocking+0x16>
			break;
		}
	}
	if (local_u16Timer != TIME_OUT)
	{
		local_u8Data = UDR;
    1e5e:	ec e2       	ldi	r30, 0x2C	; 44
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8b 83       	std	Y+3, r24	; 0x03
	}

	return local_u8Data;
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <MUART_u8ReadAsync>:

u8 MUART_u8ReadAsync (void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    1e7c:	ec e2       	ldi	r30, 0x2C	; 44
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <MUART_voidSendString>:

void MUART_voidSendString (u8* Ptr_String)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <MUART_voidSendString+0x6>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0 ; Ptr_String[i] != '\0' ; i++)
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <MUART_voidSendString+0x30>
			{
					MUART_voidSendSyncBlocking(Ptr_String[i]);
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	80 81       	ld	r24, Z
    1eae:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MUART_voidSendSyncBlocking>
	return UDR;
}

void MUART_voidSendString (u8* Ptr_String)
{
	for (u8 i = 0 ; Ptr_String[i] != '\0' ; i++)
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e2 0f       	add	r30, r18
    1ec6:	f3 1f       	adc	r31, r19
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 23       	and	r24, r24
    1ecc:	39 f7       	brne	.-50     	; 0x1e9c <MUART_voidSendString+0x14>
			{
					MUART_voidSendSyncBlocking(Ptr_String[i]);
			}
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <HULTRASONIC_u8ReadDistance>:
#include "../Include/HAL/ULTRASONIC/ULTRASONIC_Interface.h"
#include "../Include/HAL/ULTRASONIC/ULTRASONIC_private.h"


u16 HULTRASONIC_u8ReadDistance(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	ac 97       	sbiw	r28, 0x2c	; 44
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ef4:	b2 e4       	ldi	r27, 0x42	; 66
    1ef6:	8b a3       	std	Y+35, r24	; 0x23
    1ef8:	9c a3       	std	Y+36, r25	; 0x24
    1efa:	ad a3       	std	Y+37, r26	; 0x25
    1efc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	6b a1       	ldd	r22, Y+35	; 0x23
    1f00:	7c a1       	ldd	r23, Y+36	; 0x24
    1f02:	8d a1       	ldd	r24, Y+37	; 0x25
    1f04:	9e a1       	ldd	r25, Y+38	; 0x26
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8f 8f       	std	Y+31, r24	; 0x1f
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	a9 a3       	std	Y+33, r26	; 0x21
    1f1c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f20:	78 a1       	ldd	r23, Y+32	; 0x20
    1f22:	89 a1       	ldd	r24, Y+33	; 0x21
    1f24:	9a a1       	ldd	r25, Y+34	; 0x22
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <HULTRASONIC_u8ReadDistance+0x66>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3e:	3f c0       	rjmp	.+126    	; 0x1fbe <HULTRASONIC_u8ReadDistance+0xe4>
	else if (__tmp > 65535)
    1f40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f42:	78 a1       	ldd	r23, Y+32	; 0x20
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	57 e4       	ldi	r21, 0x47	; 71
    1f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	4c f5       	brge	.+82     	; 0x1faa <HULTRASONIC_u8ReadDistance+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e2       	ldi	r20, 0x20	; 32
    1f66:	51 e4       	ldi	r21, 0x41	; 65
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <HULTRASONIC_u8ReadDistance+0xc6>
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9c 8f       	std	Y+28, r25	; 0x1c
    1f88:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <HULTRASONIC_u8ReadDistance+0xb4>
    1f92:	9c 8f       	std	Y+28, r25	; 0x1c
    1f94:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <HULTRASONIC_u8ReadDistance+0xa8>
    1fa8:	14 c0       	rjmp	.+40     	; 0x1fd2 <HULTRASONIC_u8ReadDistance+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fac:	78 a1       	ldd	r23, Y+32	; 0x20
    1fae:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc4:	89 8f       	std	Y+25, r24	; 0x19
    1fc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1fc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <HULTRASONIC_u8ReadDistance+0xf0>
    1fce:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms (100);
	u16  A_u16_Start ,A_u16End , A_u16Distance = 0;
    1fd2:	18 a6       	std	Y+40, r1	; 0x28
    1fd4:	1f a2       	std	Y+39, r1	; 0x27
	MDIO_voidSetPinValue(ULTRASONIC_PORT , ULTRASONIC_TRIG_PIN , 1);
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	65 e0       	ldi	r22, 0x05	; 5
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe6:	b1 e4       	ldi	r27, 0x41	; 65
    1fe8:	8d 8b       	std	Y+21, r24	; 0x15
    1fea:	9e 8b       	std	Y+22, r25	; 0x16
    1fec:	af 8b       	std	Y+23, r26	; 0x17
    1fee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	2b ea       	ldi	r18, 0xAB	; 171
    1ffa:	3a ea       	ldi	r19, 0xAA	; 170
    1ffc:	4a e2       	ldi	r20, 0x2A	; 42
    1ffe:	50 e4       	ldi	r21, 0x40	; 64
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	89 8b       	std	Y+17, r24	; 0x11
    200a:	9a 8b       	std	Y+18, r25	; 0x12
    200c:	ab 8b       	std	Y+19, r26	; 0x13
    200e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2010:	69 89       	ldd	r22, Y+17	; 0x11
    2012:	7a 89       	ldd	r23, Y+18	; 0x12
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	1c f4       	brge	.+6      	; 0x202e <HULTRASONIC_u8ReadDistance+0x154>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	88 8b       	std	Y+16, r24	; 0x10
    202c:	91 c0       	rjmp	.+290    	; 0x2150 <HULTRASONIC_u8ReadDistance+0x276>
	else if (__tmp > 255)
    202e:	69 89       	ldd	r22, Y+17	; 0x11
    2030:	7a 89       	ldd	r23, Y+18	; 0x12
    2032:	8b 89       	ldd	r24, Y+19	; 0x13
    2034:	9c 89       	ldd	r25, Y+20	; 0x14
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	53 e4       	ldi	r21, 0x43	; 67
    203e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	0c f0       	brlt	.+2      	; 0x2048 <HULTRASONIC_u8ReadDistance+0x16e>
    2046:	7b c0       	rjmp	.+246    	; 0x213e <HULTRASONIC_u8ReadDistance+0x264>
	{
		_delay_ms(__us / 1000.0);
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	54 e4       	ldi	r21, 0x44	; 68
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8c 87       	std	Y+12, r24	; 0x0c
    2062:	9d 87       	std	Y+13, r25	; 0x0d
    2064:	ae 87       	std	Y+14, r26	; 0x0e
    2066:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6c 85       	ldd	r22, Y+12	; 0x0c
    206a:	7d 85       	ldd	r23, Y+13	; 0x0d
    206c:	8e 85       	ldd	r24, Y+14	; 0x0e
    206e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	88 87       	std	Y+8, r24	; 0x08
    2082:	99 87       	std	Y+9, r25	; 0x09
    2084:	aa 87       	std	Y+10, r26	; 0x0a
    2086:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2088:	68 85       	ldd	r22, Y+8	; 0x08
    208a:	79 85       	ldd	r23, Y+9	; 0x09
    208c:	8a 85       	ldd	r24, Y+10	; 0x0a
    208e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <HULTRASONIC_u8ReadDistance+0x1d0>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9f 83       	std	Y+7, r25	; 0x07
    20a6:	8e 83       	std	Y+6, r24	; 0x06
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <HULTRASONIC_u8ReadDistance+0x24e>
	else if (__tmp > 65535)
    20aa:	68 85       	ldd	r22, Y+8	; 0x08
    20ac:	79 85       	ldd	r23, Y+9	; 0x09
    20ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <HULTRASONIC_u8ReadDistance+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    20c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9f 83       	std	Y+7, r25	; 0x07
    20e8:	8e 83       	std	Y+6, r24	; 0x06
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <HULTRASONIC_u8ReadDistance+0x230>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9d 83       	std	Y+5, r25	; 0x05
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <HULTRASONIC_u8ReadDistance+0x21e>
    20fc:	9d 83       	std	Y+5, r25	; 0x05
    20fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	9f 81       	ldd	r25, Y+7	; 0x07
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9f 83       	std	Y+7, r25	; 0x07
    2108:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	9f 81       	ldd	r25, Y+7	; 0x07
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <HULTRASONIC_u8ReadDistance+0x212>
    2112:	24 c0       	rjmp	.+72     	; 0x215c <HULTRASONIC_u8ReadDistance+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	68 85       	ldd	r22, Y+8	; 0x08
    2116:	79 85       	ldd	r23, Y+9	; 0x09
    2118:	8a 85       	ldd	r24, Y+10	; 0x0a
    211a:	9b 85       	ldd	r25, Y+11	; 0x0b
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9f 83       	std	Y+7, r25	; 0x07
    2126:	8e 83       	std	Y+6, r24	; 0x06
    2128:	8e 81       	ldd	r24, Y+6	; 0x06
    212a:	9f 81       	ldd	r25, Y+7	; 0x07
    212c:	9b 83       	std	Y+3, r25	; 0x03
    212e:	8a 83       	std	Y+2, r24	; 0x02
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	9b 81       	ldd	r25, Y+3	; 0x03
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <HULTRASONIC_u8ReadDistance+0x25a>
    2138:	9b 83       	std	Y+3, r25	; 0x03
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	0f c0       	rjmp	.+30     	; 0x215c <HULTRASONIC_u8ReadDistance+0x282>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    213e:	69 89       	ldd	r22, Y+17	; 0x11
    2140:	7a 89       	ldd	r23, Y+18	; 0x12
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	88 8b       	std	Y+16, r24	; 0x10
    2150:	88 89       	ldd	r24, Y+16	; 0x10
    2152:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	8a 95       	dec	r24
    2158:	f1 f7       	brne	.-4      	; 0x2156 <HULTRASONIC_u8ReadDistance+0x27c>
    215a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (20);
	MDIO_voidSetPinValue(ULTRASONIC_PORT , ULTRASONIC_TRIG_PIN , 0);
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	65 e0       	ldi	r22, 0x05	; 5
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>
	TCCR1B |= (1<<ICES1);
    2166:	ae e4       	ldi	r26, 0x4E	; 78
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ee e4       	ldi	r30, 0x4E	; 78
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8c 93       	st	X, r24
	while ((TIFR&(1<<ICF1)) == 0);
    2174:	e8 e5       	ldi	r30, 0x58	; 88
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	80 72       	andi	r24, 0x20	; 32
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	b9 f3       	breq	.-18     	; 0x2174 <HULTRASONIC_u8ReadDistance+0x29a>
	MDIO_voidSetPinValue(ULTRASONIC_PORT , PIN6 , 1);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	66 e0       	ldi	r22, 0x06	; 6
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 23 07 	call	0xe46	; 0xe46 <MDIO_voidSetPinValue>

	A_u16_Start = ICR1;
    2190:	e6 e4       	ldi	r30, 0x46	; 70
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	9c a7       	std	Y+44, r25	; 0x2c
    219a:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT (TIFR , ICF1);
    219c:	a8 e5       	ldi	r26, 0x58	; 88
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e8 e5       	ldi	r30, 0x58	; 88
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 62       	ori	r24, 0x20	; 32
    21a8:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<ICES1);
    21aa:	ae e4       	ldi	r26, 0x4E	; 78
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ee e4       	ldi	r30, 0x4E	; 78
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 7b       	andi	r24, 0xBF	; 191
    21b6:	8c 93       	st	X, r24
	while ((TIFR&(1<<ICF1)) == 0);
    21b8:	e8 e5       	ldi	r30, 0x58	; 88
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	80 72       	andi	r24, 0x20	; 32
    21c4:	90 70       	andi	r25, 0x00	; 0
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	b9 f3       	breq	.-18     	; 0x21b8 <HULTRASONIC_u8ReadDistance+0x2de>

	A_u16End = ICR1;
    21ca:	e6 e4       	ldi	r30, 0x46	; 70
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	9a a7       	std	Y+42, r25	; 0x2a
    21d4:	89 a7       	std	Y+41, r24	; 0x29
	SET_BIT (TIFR , ICF1);
    21d6:	a8 e5       	ldi	r26, 0x58	; 88
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e8 e5       	ldi	r30, 0x58	; 88
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 62       	ori	r24, 0x20	; 32
    21e2:	8c 93       	st	X, r24
	A_u16Distance = (u16)((A_u16End-A_u16_Start)/58);
    21e4:	29 a5       	ldd	r18, Y+41	; 0x29
    21e6:	3a a5       	ldd	r19, Y+42	; 0x2a
    21e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ec:	a9 01       	movw	r20, r18
    21ee:	48 1b       	sub	r20, r24
    21f0:	59 0b       	sbc	r21, r25
    21f2:	ca 01       	movw	r24, r20
    21f4:	2a e3       	ldi	r18, 0x3A	; 58
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	b9 01       	movw	r22, r18
    21fa:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodhi4>
    21fe:	cb 01       	movw	r24, r22
    2200:	98 a7       	std	Y+40, r25	; 0x28
    2202:	8f a3       	std	Y+39, r24	; 0x27

	return A_u16Distance ;
    2204:	8f a1       	ldd	r24, Y+39	; 0x27
    2206:	98 a5       	ldd	r25, Y+40	; 0x28
}
    2208:	ac 96       	adiw	r28, 0x2c	; 44
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <main>:

#define RIGHTSENSOR_PIN		PIN2
#define LEFTSENSOR_PIN		PIN3

void main (void)
{
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	cd 54       	subi	r28, 0x4D	; 77
    2228:	d0 40       	sbci	r29, 0x00	; 0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    2234:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MDIO_voidInit>
	MTIMER0_voidInit();
    2238:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <MTIMER0_voidInit>
	MTIMER1_voidInit();
    223c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <MTIMER1_voidInit>
	MTIMER2_voidInit();
    2240:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MTIMER2_voidInit>
	MUART_voidInit();
    2244:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <MUART_voidInit>
	u8 Mode = '0';
    2248:	fe 01       	movw	r30, r28
    224a:	e7 5b       	subi	r30, 0xB7	; 183
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 e3       	ldi	r24, 0x30	; 48
    2250:	80 83       	st	Z, r24
	u8 LeftDistance;
	u8 RightDistance;
	HSERVO_voidSetAngle(0);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 1f 0b 	call	0x163e	; 0x163e <HSERVO_voidSetAngle>
	while (1)
	{
		while (MUART_u8ReadSyncBlocking() != '1');
    225a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <MUART_u8ReadSyncBlocking>
    225e:	81 33       	cpi	r24, 0x31	; 49
    2260:	e1 f7       	brne	.-8      	; 0x225a <main+0x40>
		MUART_voidSendString("A)Controller\nB)Avoid Obstacles\nC)Line Follower\n");
    2262:	80 e6       	ldi	r24, 0x60	; 96
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MUART_voidSendString>
		MUART_voidSendString("Wanted Mode : ");
    226a:	80 e9       	ldi	r24, 0x90	; 144
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MUART_voidSendString>
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <main+0x66>
		while (Mode != 'A' && Mode != 'B' && Mode != 'C')
		{
			Mode = MUART_u8ReadSyncBlocking();
    2274:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <MUART_u8ReadSyncBlocking>
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5b       	subi	r30, 0xB7	; 183
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 83       	st	Z, r24
	while (1)
	{
		while (MUART_u8ReadSyncBlocking() != '1');
		MUART_voidSendString("A)Controller\nB)Avoid Obstacles\nC)Line Follower\n");
		MUART_voidSendString("Wanted Mode : ");
		while (Mode != 'A' && Mode != 'B' && Mode != 'C')
    2280:	fe 01       	movw	r30, r28
    2282:	e7 5b       	subi	r30, 0xB7	; 183
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	81 34       	cpi	r24, 0x41	; 65
    228a:	61 f0       	breq	.+24     	; 0x22a4 <main+0x8a>
    228c:	fe 01       	movw	r30, r28
    228e:	e7 5b       	subi	r30, 0xB7	; 183
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	82 34       	cpi	r24, 0x42	; 66
    2296:	31 f0       	breq	.+12     	; 0x22a4 <main+0x8a>
    2298:	fe 01       	movw	r30, r28
    229a:	e7 5b       	subi	r30, 0xB7	; 183
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	83 34       	cpi	r24, 0x43	; 67
    22a2:	41 f7       	brne	.-48     	; 0x2274 <main+0x5a>
		{
			Mode = MUART_u8ReadSyncBlocking();
		}
		switch (Mode)
    22a4:	fe 01       	movw	r30, r28
    22a6:	e7 5b       	subi	r30, 0xB7	; 183
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	2e 96       	adiw	r28, 0x0e	; 14
    22b2:	3f af       	std	Y+63, r19	; 0x3f
    22b4:	2e af       	std	Y+62, r18	; 0x3e
    22b6:	2e 97       	sbiw	r28, 0x0e	; 14
    22b8:	2e 96       	adiw	r28, 0x0e	; 14
    22ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    22bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    22be:	2e 97       	sbiw	r28, 0x0e	; 14
    22c0:	82 34       	cpi	r24, 0x42	; 66
    22c2:	91 05       	cpc	r25, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <main+0xae>
    22c6:	5c c0       	rjmp	.+184    	; 0x2380 <main+0x166>
    22c8:	2e 96       	adiw	r28, 0x0e	; 14
    22ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    22cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    22ce:	2e 97       	sbiw	r28, 0x0e	; 14
    22d0:	e3 34       	cpi	r30, 0x43	; 67
    22d2:	f1 05       	cpc	r31, r1
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <main+0xbe>
    22d6:	dc c2       	rjmp	.+1464   	; 0x2890 <main+0x676>
    22d8:	2e 96       	adiw	r28, 0x0e	; 14
    22da:	2e ad       	ldd	r18, Y+62	; 0x3e
    22dc:	3f ad       	ldd	r19, Y+63	; 0x3f
    22de:	2e 97       	sbiw	r28, 0x0e	; 14
    22e0:	21 34       	cpi	r18, 0x41	; 65
    22e2:	31 05       	cpc	r19, r1
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <main+0xce>
    22e6:	b9 cf       	rjmp	.-142    	; 0x225a <main+0x40>
		{
		case 'A':
			HMOTORS_voidStop();
    22e8:	0e 94 04 0b 	call	0x1608	; 0x1608 <HMOTORS_voidStop>
			MUART_voidSendString("Contoller Mode\n");
    22ec:	8f e9       	ldi	r24, 0x9F	; 159
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MUART_voidSendString>
			while (1)
			{
				HMOTORS_SetSpeedPercentage(40);
    22f4:	88 e2       	ldi	r24, 0x28	; 40
    22f6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HMOTORS_SetSpeedPercentage>
				switch (MUART_u8ReadSyncBlocking())
    22fa:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <MUART_u8ReadSyncBlocking>
    22fe:	e8 2f       	mov	r30, r24
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	2c 96       	adiw	r28, 0x0c	; 12
    2304:	ff af       	std	Y+63, r31	; 0x3f
    2306:	ee af       	std	Y+62, r30	; 0x3e
    2308:	2c 97       	sbiw	r28, 0x0c	; 12
    230a:	2c 96       	adiw	r28, 0x0c	; 12
    230c:	2e ad       	ldd	r18, Y+62	; 0x3e
    230e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2310:	2c 97       	sbiw	r28, 0x0c	; 12
    2312:	2c 34       	cpi	r18, 0x4C	; 76
    2314:	31 05       	cpc	r19, r1
    2316:	41 f1       	breq	.+80     	; 0x2368 <main+0x14e>
    2318:	2c 96       	adiw	r28, 0x0c	; 12
    231a:	8e ad       	ldd	r24, Y+62	; 0x3e
    231c:	9f ad       	ldd	r25, Y+63	; 0x3f
    231e:	2c 97       	sbiw	r28, 0x0c	; 12
    2320:	8d 34       	cpi	r24, 0x4D	; 77
    2322:	91 05       	cpc	r25, r1
    2324:	7c f4       	brge	.+30     	; 0x2344 <main+0x12a>
    2326:	2c 96       	adiw	r28, 0x0c	; 12
    2328:	ee ad       	ldd	r30, Y+62	; 0x3e
    232a:	ff ad       	ldd	r31, Y+63	; 0x3f
    232c:	2c 97       	sbiw	r28, 0x0c	; 12
    232e:	e2 34       	cpi	r30, 0x42	; 66
    2330:	f1 05       	cpc	r31, r1
    2332:	01 f1       	breq	.+64     	; 0x2374 <main+0x15a>
    2334:	2c 96       	adiw	r28, 0x0c	; 12
    2336:	2e ad       	ldd	r18, Y+62	; 0x3e
    2338:	3f ad       	ldd	r19, Y+63	; 0x3f
    233a:	2c 97       	sbiw	r28, 0x0c	; 12
    233c:	26 34       	cpi	r18, 0x46	; 70
    233e:	31 05       	cpc	r19, r1
    2340:	b1 f0       	breq	.+44     	; 0x236e <main+0x154>
    2342:	d8 cf       	rjmp	.-80     	; 0x22f4 <main+0xda>
    2344:	2c 96       	adiw	r28, 0x0c	; 12
    2346:	8e ad       	ldd	r24, Y+62	; 0x3e
    2348:	9f ad       	ldd	r25, Y+63	; 0x3f
    234a:	2c 97       	sbiw	r28, 0x0c	; 12
    234c:	82 35       	cpi	r24, 0x52	; 82
    234e:	91 05       	cpc	r25, r1
    2350:	41 f0       	breq	.+16     	; 0x2362 <main+0x148>
    2352:	2c 96       	adiw	r28, 0x0c	; 12
    2354:	ee ad       	ldd	r30, Y+62	; 0x3e
    2356:	ff ad       	ldd	r31, Y+63	; 0x3f
    2358:	2c 97       	sbiw	r28, 0x0c	; 12
    235a:	e3 35       	cpi	r30, 0x53	; 83
    235c:	f1 05       	cpc	r31, r1
    235e:	69 f0       	breq	.+26     	; 0x237a <main+0x160>
    2360:	c9 cf       	rjmp	.-110    	; 0x22f4 <main+0xda>
				{
				case 'R' :
					HMOTORS_voidTurnRight();
    2362:	0e 94 b3 0a 	call	0x1566	; 0x1566 <HMOTORS_voidTurnRight>
    2366:	c6 cf       	rjmp	.-116    	; 0x22f4 <main+0xda>
					break;
				case 'L' :
					HMOTORS_voidTurnLeft();
    2368:	0e 94 98 0a 	call	0x1530	; 0x1530 <HMOTORS_voidTurnLeft>
    236c:	c3 cf       	rjmp	.-122    	; 0x22f4 <main+0xda>
					break;
				case 'F' :
					HMOTORS_voidTurnUp();
    236e:	0e 94 ce 0a 	call	0x159c	; 0x159c <HMOTORS_voidTurnUp>
    2372:	c0 cf       	rjmp	.-128    	; 0x22f4 <main+0xda>
					break;
				case 'B' :
					HMOTORS_voidTurnDown();
    2374:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <HMOTORS_voidTurnDown>
    2378:	bd cf       	rjmp	.-134    	; 0x22f4 <main+0xda>
					break;
				case 'S' :
					HMOTORS_voidStop();
    237a:	0e 94 04 0b 	call	0x1608	; 0x1608 <HMOTORS_voidStop>
    237e:	ba cf       	rjmp	.-140    	; 0x22f4 <main+0xda>
					break;
				}
			}
			break;
		case 'B':
			MUART_voidSendString("Obstacle Mode\n");
    2380:	8f ea       	ldi	r24, 0xAF	; 175
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MUART_voidSendString>
			while (1)
			{
				HMOTORS_SetSpeedPercentage(40);
    2388:	88 e2       	ldi	r24, 0x28	; 40
    238a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HMOTORS_SetSpeedPercentage>
				HMOTORS_voidTurnUp();
    238e:	0e 94 ce 0a 	call	0x159c	; 0x159c <HMOTORS_voidTurnUp>
				while (HULTRASONIC_u8ReadDistance() >= 20);
    2392:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <HULTRASONIC_u8ReadDistance>
    2396:	84 31       	cpi	r24, 0x14	; 20
    2398:	91 05       	cpc	r25, r1
    239a:	d8 f7       	brcc	.-10     	; 0x2392 <main+0x178>
				HMOTORS_voidTurnDown();
    239c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <HMOTORS_voidTurnDown>
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 5b       	subi	r30, 0xBD	; 189
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a8 ec       	ldi	r26, 0xC8	; 200
    23ac:	b2 e4       	ldi	r27, 0x42	; 66
    23ae:	80 83       	st	Z, r24
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	a2 83       	std	Z+2, r26	; 0x02
    23b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	8e 01       	movw	r16, r28
    23b8:	01 5c       	subi	r16, 0xC1	; 193
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 5b       	subi	r30, 0xBD	; 189
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a ef       	ldi	r20, 0xFA	; 250
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	f8 01       	movw	r30, r16
    23dc:	80 83       	st	Z, r24
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	a2 83       	std	Z+2, r26	; 0x02
    23e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e4:	fe 01       	movw	r30, r28
    23e6:	ff 96       	adiw	r30, 0x3f	; 63
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <main+0x1f0>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9e af       	std	Y+62, r25	; 0x3e
    2406:	8d af       	std	Y+61, r24	; 0x3d
    2408:	46 c0       	rjmp	.+140    	; 0x2496 <main+0x27c>
	else if (__tmp > 65535)
    240a:	fe 01       	movw	r30, r28
    240c:	ff 96       	adiw	r30, 0x3f	; 63
    240e:	60 81       	ld	r22, Z
    2410:	71 81       	ldd	r23, Z+1	; 0x01
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	93 81       	ldd	r25, Z+3	; 0x03
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	64 f5       	brge	.+88     	; 0x247e <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	fe 01       	movw	r30, r28
    2428:	ed 5b       	subi	r30, 0xBD	; 189
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e af       	std	Y+62, r25	; 0x3e
    2452:	8d af       	std	Y+61, r24	; 0x3d
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <main+0x25a>
    2456:	88 ec       	ldi	r24, 0xC8	; 200
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9c af       	std	Y+60, r25	; 0x3c
    245c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2460:	9c ad       	ldd	r25, Y+60	; 0x3c
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <main+0x248>
    2466:	9c af       	std	Y+60, r25	; 0x3c
    2468:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8d ad       	ldd	r24, Y+61	; 0x3d
    246c:	9e ad       	ldd	r25, Y+62	; 0x3e
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9e af       	std	Y+62, r25	; 0x3e
    2472:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8d ad       	ldd	r24, Y+61	; 0x3d
    2476:	9e ad       	ldd	r25, Y+62	; 0x3e
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <main+0x23c>
    247c:	16 c0       	rjmp	.+44     	; 0x24aa <main+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	fe 01       	movw	r30, r28
    2480:	ff 96       	adiw	r30, 0x3f	; 63
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9e af       	std	Y+62, r25	; 0x3e
    2494:	8d af       	std	Y+61, r24	; 0x3d
    2496:	8d ad       	ldd	r24, Y+61	; 0x3d
    2498:	9e ad       	ldd	r25, Y+62	; 0x3e
    249a:	9a af       	std	Y+58, r25	; 0x3a
    249c:	89 af       	std	Y+57, r24	; 0x39
    249e:	89 ad       	ldd	r24, Y+57	; 0x39
    24a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <main+0x288>
    24a6:	9a af       	std	Y+58, r25	; 0x3a
    24a8:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms (100);
				HMOTORS_voidStop();
    24aa:	0e 94 04 0b 	call	0x1608	; 0x1608 <HMOTORS_voidStop>
				HSERVO_voidSetAngle(90);
    24ae:	8a e5       	ldi	r24, 0x5A	; 90
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 1f 0b 	call	0x163e	; 0x163e <HSERVO_voidSetAngle>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	aa e7       	ldi	r26, 0x7A	; 122
    24bc:	b4 e4       	ldi	r27, 0x44	; 68
    24be:	8d ab       	std	Y+53, r24	; 0x35
    24c0:	9e ab       	std	Y+54, r25	; 0x36
    24c2:	af ab       	std	Y+55, r26	; 0x37
    24c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c6:	6d a9       	ldd	r22, Y+53	; 0x35
    24c8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ca:	8f a9       	ldd	r24, Y+55	; 0x37
    24cc:	98 ad       	ldd	r25, Y+56	; 0x38
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a ef       	ldi	r20, 0xFA	; 250
    24d4:	54 e4       	ldi	r21, 0x44	; 68
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	89 ab       	std	Y+49, r24	; 0x31
    24e0:	9a ab       	std	Y+50, r25	; 0x32
    24e2:	ab ab       	std	Y+51, r26	; 0x33
    24e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24e6:	69 a9       	ldd	r22, Y+49	; 0x31
    24e8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ea:	8b a9       	ldd	r24, Y+51	; 0x33
    24ec:	9c a9       	ldd	r25, Y+52	; 0x34
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e8       	ldi	r20, 0x80	; 128
    24f4:	5f e3       	ldi	r21, 0x3F	; 63
    24f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24fa:	88 23       	and	r24, r24
    24fc:	2c f4       	brge	.+10     	; 0x2508 <main+0x2ee>
		__ticks = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
    2506:	3f c0       	rjmp	.+126    	; 0x2586 <main+0x36c>
	else if (__tmp > 65535)
    2508:	69 a9       	ldd	r22, Y+49	; 0x31
    250a:	7a a9       	ldd	r23, Y+50	; 0x32
    250c:	8b a9       	ldd	r24, Y+51	; 0x33
    250e:	9c a9       	ldd	r25, Y+52	; 0x34
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	4c f5       	brge	.+82     	; 0x2572 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2520:	6d a9       	ldd	r22, Y+53	; 0x35
    2522:	7e a9       	ldd	r23, Y+54	; 0x36
    2524:	8f a9       	ldd	r24, Y+55	; 0x37
    2526:	98 ad       	ldd	r25, Y+56	; 0x38
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	98 ab       	std	Y+48, r25	; 0x30
    2546:	8f a7       	std	Y+47, r24	; 0x2f
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <main+0x34e>
    254a:	88 ec       	ldi	r24, 0xC8	; 200
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e a7       	std	Y+46, r25	; 0x2e
    2550:	8d a7       	std	Y+45, r24	; 0x2d
    2552:	8d a5       	ldd	r24, Y+45	; 0x2d
    2554:	9e a5       	ldd	r25, Y+46	; 0x2e
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <main+0x33c>
    255a:	9e a7       	std	Y+46, r25	; 0x2e
    255c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2560:	98 a9       	ldd	r25, Y+48	; 0x30
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	98 ab       	std	Y+48, r25	; 0x30
    2566:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	69 f7       	brne	.-38     	; 0x254a <main+0x330>
    2570:	14 c0       	rjmp	.+40     	; 0x259a <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	69 a9       	ldd	r22, Y+49	; 0x31
    2574:	7a a9       	ldd	r23, Y+50	; 0x32
    2576:	8b a9       	ldd	r24, Y+51	; 0x33
    2578:	9c a9       	ldd	r25, Y+52	; 0x34
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	98 ab       	std	Y+48, r25	; 0x30
    2584:	8f a7       	std	Y+47, r24	; 0x2f
    2586:	8f a5       	ldd	r24, Y+47	; 0x2f
    2588:	98 a9       	ldd	r25, Y+48	; 0x30
    258a:	9c a7       	std	Y+44, r25	; 0x2c
    258c:	8b a7       	std	Y+43, r24	; 0x2b
    258e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2590:	9c a5       	ldd	r25, Y+44	; 0x2c
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <main+0x378>
    2596:	9c a7       	std	Y+44, r25	; 0x2c
    2598:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms (1000);
				LeftDistance = HULTRASONIC_u8ReadDistance();
    259a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <HULTRASONIC_u8ReadDistance>
    259e:	fe 01       	movw	r30, r28
    25a0:	e8 5b       	subi	r30, 0xB8	; 184
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 83       	st	Z, r24
				HSERVO_voidSetAngle(-90);
    25a6:	86 ea       	ldi	r24, 0xA6	; 166
    25a8:	9f ef       	ldi	r25, 0xFF	; 255
    25aa:	0e 94 1f 0b 	call	0x163e	; 0x163e <HSERVO_voidSetAngle>
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	aa e7       	ldi	r26, 0x7A	; 122
    25b4:	b4 e4       	ldi	r27, 0x44	; 68
    25b6:	8f a3       	std	Y+39, r24	; 0x27
    25b8:	98 a7       	std	Y+40, r25	; 0x28
    25ba:	a9 a7       	std	Y+41, r26	; 0x29
    25bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25be:	6f a1       	ldd	r22, Y+39	; 0x27
    25c0:	78 a5       	ldd	r23, Y+40	; 0x28
    25c2:	89 a5       	ldd	r24, Y+41	; 0x29
    25c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	4a ef       	ldi	r20, 0xFA	; 250
    25cc:	54 e4       	ldi	r21, 0x44	; 68
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8b a3       	std	Y+35, r24	; 0x23
    25d8:	9c a3       	std	Y+36, r25	; 0x24
    25da:	ad a3       	std	Y+37, r26	; 0x25
    25dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25de:	6b a1       	ldd	r22, Y+35	; 0x23
    25e0:	7c a1       	ldd	r23, Y+36	; 0x24
    25e2:	8d a1       	ldd	r24, Y+37	; 0x25
    25e4:	9e a1       	ldd	r25, Y+38	; 0x26
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	2c f4       	brge	.+10     	; 0x2600 <main+0x3e6>
		__ticks = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
    25fe:	3f c0       	rjmp	.+126    	; 0x267e <main+0x464>
	else if (__tmp > 65535)
    2600:	6b a1       	ldd	r22, Y+35	; 0x23
    2602:	7c a1       	ldd	r23, Y+36	; 0x24
    2604:	8d a1       	ldd	r24, Y+37	; 0x25
    2606:	9e a1       	ldd	r25, Y+38	; 0x26
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3f ef       	ldi	r19, 0xFF	; 255
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	57 e4       	ldi	r21, 0x47	; 71
    2610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	4c f5       	brge	.+82     	; 0x266a <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2618:	6f a1       	ldd	r22, Y+39	; 0x27
    261a:	78 a5       	ldd	r23, Y+40	; 0x28
    261c:	89 a5       	ldd	r24, Y+41	; 0x29
    261e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e2       	ldi	r20, 0x20	; 32
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <main+0x446>
    2642:	88 ec       	ldi	r24, 0xC8	; 200
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	98 a3       	std	Y+32, r25	; 0x20
    2648:	8f 8f       	std	Y+31, r24	; 0x1f
    264a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264c:	98 a1       	ldd	r25, Y+32	; 0x20
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <main+0x434>
    2652:	98 a3       	std	Y+32, r25	; 0x20
    2654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	89 a1       	ldd	r24, Y+33	; 0x21
    2658:	9a a1       	ldd	r25, Y+34	; 0x22
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	9a a3       	std	Y+34, r25	; 0x22
    265e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	89 a1       	ldd	r24, Y+33	; 0x21
    2662:	9a a1       	ldd	r25, Y+34	; 0x22
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	69 f7       	brne	.-38     	; 0x2642 <main+0x428>
    2668:	14 c0       	rjmp	.+40     	; 0x2692 <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266a:	6b a1       	ldd	r22, Y+35	; 0x23
    266c:	7c a1       	ldd	r23, Y+36	; 0x24
    266e:	8d a1       	ldd	r24, Y+37	; 0x25
    2670:	9e a1       	ldd	r25, Y+38	; 0x26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9a a3       	std	Y+34, r25	; 0x22
    267c:	89 a3       	std	Y+33, r24	; 0x21
    267e:	89 a1       	ldd	r24, Y+33	; 0x21
    2680:	9a a1       	ldd	r25, Y+34	; 0x22
    2682:	9e 8f       	std	Y+30, r25	; 0x1e
    2684:	8d 8f       	std	Y+29, r24	; 0x1d
    2686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <main+0x470>
    268e:	9e 8f       	std	Y+30, r25	; 0x1e
    2690:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms (1000);
				RightDistance = HULTRASONIC_u8ReadDistance();
    2692:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <HULTRASONIC_u8ReadDistance>
    2696:	fe 01       	movw	r30, r28
    2698:	e9 5b       	subi	r30, 0xB9	; 185
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 83       	st	Z, r24
				HSERVO_voidSetAngle(0);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 1f 0b 	call	0x163e	; 0x163e <HSERVO_voidSetAngle>

				if (LeftDistance >= RightDistance)
    26a6:	fe 01       	movw	r30, r28
    26a8:	e8 5b       	subi	r30, 0xB8	; 184
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	de 01       	movw	r26, r28
    26ae:	a9 5b       	subi	r26, 0xB9	; 185
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	90 81       	ld	r25, Z
    26b4:	8c 91       	ld	r24, X
    26b6:	98 17       	cp	r25, r24
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <main+0x4a2>
    26ba:	75 c0       	rjmp	.+234    	; 0x27a6 <main+0x58c>
				{
					HMOTORS_voidTurnLeft();
    26bc:	0e 94 98 0a 	call	0x1530	; 0x1530 <HMOTORS_voidTurnLeft>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	aa e7       	ldi	r26, 0x7A	; 122
    26c6:	b4 e4       	ldi	r27, 0x44	; 68
    26c8:	89 8f       	std	Y+25, r24	; 0x19
    26ca:	9a 8f       	std	Y+26, r25	; 0x1a
    26cc:	ab 8f       	std	Y+27, r26	; 0x1b
    26ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	69 8d       	ldd	r22, Y+25	; 0x19
    26d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8d 8b       	std	Y+21, r24	; 0x15
    26ea:	9e 8b       	std	Y+22, r25	; 0x16
    26ec:	af 8b       	std	Y+23, r26	; 0x17
    26ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <main+0x4f8>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <main+0x576>
	else if (__tmp > 65535)
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <main+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	69 8d       	ldd	r22, Y+25	; 0x19
    272c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <main+0x558>
    2754:	88 ec       	ldi	r24, 0xC8	; 200
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9a 8b       	std	Y+18, r25	; 0x12
    275a:	89 8b       	std	Y+17, r24	; 0x11
    275c:	89 89       	ldd	r24, Y+17	; 0x11
    275e:	9a 89       	ldd	r25, Y+18	; 0x12
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <main+0x546>
    2764:	9a 8b       	std	Y+18, r25	; 0x12
    2766:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	9c 89       	ldd	r25, Y+20	; 0x14
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9c 8b       	std	Y+20, r25	; 0x14
    2770:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <main+0x53a>
    277a:	06 ce       	rjmp	.-1012   	; 0x2388 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6d 89       	ldd	r22, Y+21	; 0x15
    277e:	7e 89       	ldd	r23, Y+22	; 0x16
    2780:	8f 89       	ldd	r24, Y+23	; 0x17
    2782:	98 8d       	ldd	r25, Y+24	; 0x18
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	98 8b       	std	Y+16, r25	; 0x10
    2796:	8f 87       	std	Y+15, r24	; 0x0f
    2798:	8f 85       	ldd	r24, Y+15	; 0x0f
    279a:	98 89       	ldd	r25, Y+16	; 0x10
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <main+0x582>
    27a0:	98 8b       	std	Y+16, r25	; 0x10
    27a2:	8f 87       	std	Y+15, r24	; 0x0f
    27a4:	f1 cd       	rjmp	.-1054   	; 0x2388 <main+0x16e>
					_delay_ms(1000);
				}
				else
				{
					HMOTORS_voidTurnRight();
    27a6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <HMOTORS_voidTurnRight>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	aa e7       	ldi	r26, 0x7A	; 122
    27b0:	b4 e4       	ldi	r27, 0x44	; 68
    27b2:	8b 87       	std	Y+11, r24	; 0x0b
    27b4:	9c 87       	std	Y+12, r25	; 0x0c
    27b6:	ad 87       	std	Y+13, r26	; 0x0d
    27b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a ef       	ldi	r20, 0xFA	; 250
    27c8:	54 e4       	ldi	r21, 0x44	; 68
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8f 83       	std	Y+7, r24	; 0x07
    27d4:	98 87       	std	Y+8, r25	; 0x08
    27d6:	a9 87       	std	Y+9, r26	; 0x09
    27d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <main+0x5e2>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <main+0x660>
	else if (__tmp > 65535)
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <main+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	0f c0       	rjmp	.+30     	; 0x285c <main+0x642>
    283e:	88 ec       	ldi	r24, 0xC8	; 200
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x630>
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <main+0x624>
    2864:	91 cd       	rjmp	.-1246   	; 0x2388 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x66c>
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	7c cd       	rjmp	.-1288   	; 0x2388 <main+0x16e>
					_delay_ms(1000);
				}
			}
			break;
		case 'C':
			MUART_voidSendString("Line Follower Mode\n");
    2890:	8e eb       	ldi	r24, 0xBE	; 190
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MUART_voidSendString>
			while (1)
			{
				HMOTORS_SetSpeedPercentage(20);
    2898:	84 e1       	ldi	r24, 0x14	; 20
    289a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <HMOTORS_SetSpeedPercentage>
				if (MDIO_u8GetPinValue(PORTD , RIGHTSENSOR_PIN) == 1 && MDIO_u8GetPinValue(PORTD , LEFTSENSOR_PIN) == 1)
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	49 f4       	brne	.+18     	; 0x28bc <main+0x6a2>
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	63 e0       	ldi	r22, 0x03	; 3
    28ae:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	19 f4       	brne	.+6      	; 0x28bc <main+0x6a2>
				{
					HMOTORS_voidTurnUp();
    28b6:	0e 94 ce 0a 	call	0x159c	; 0x159c <HMOTORS_voidTurnUp>
    28ba:	ee cf       	rjmp	.-36     	; 0x2898 <main+0x67e>
				}
				else if (MDIO_u8GetPinValue(PORTD , RIGHTSENSOR_PIN) == 0 && MDIO_u8GetPinValue(PORTD , LEFTSENSOR_PIN) == 1)
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	62 e0       	ldi	r22, 0x02	; 2
    28c0:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28c4:	88 23       	and	r24, r24
    28c6:	49 f4       	brne	.+18     	; 0x28da <main+0x6c0>
    28c8:	83 e0       	ldi	r24, 0x03	; 3
    28ca:	63 e0       	ldi	r22, 0x03	; 3
    28cc:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	19 f4       	brne	.+6      	; 0x28da <main+0x6c0>
				{
					HMOTORS_voidTurnLeft();
    28d4:	0e 94 98 0a 	call	0x1530	; 0x1530 <HMOTORS_voidTurnLeft>
    28d8:	df cf       	rjmp	.-66     	; 0x2898 <main+0x67e>
				}
				else if (MDIO_u8GetPinValue(PORTD , RIGHTSENSOR_PIN) == 1 && MDIO_u8GetPinValue(PORTD , LEFTSENSOR_PIN) == 0)
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	62 e0       	ldi	r22, 0x02	; 2
    28de:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	49 f4       	brne	.+18     	; 0x28f8 <main+0x6de>
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	63 e0       	ldi	r22, 0x03	; 3
    28ea:	0e 94 4f 09 	call	0x129e	; 0x129e <MDIO_u8GetPinValue>
    28ee:	88 23       	and	r24, r24
    28f0:	19 f4       	brne	.+6      	; 0x28f8 <main+0x6de>
				{
					HMOTORS_voidTurnRight();
    28f2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <HMOTORS_voidTurnRight>
    28f6:	d0 cf       	rjmp	.-96     	; 0x2898 <main+0x67e>
				}
				else
				{
					HMOTORS_voidStop();
    28f8:	0e 94 04 0b 	call	0x1608	; 0x1608 <HMOTORS_voidStop>
    28fc:	cd cf       	rjmp	.-102    	; 0x2898 <main+0x67e>

000028fe <__udivmodhi4>:
    28fe:	aa 1b       	sub	r26, r26
    2900:	bb 1b       	sub	r27, r27
    2902:	51 e1       	ldi	r21, 0x11	; 17
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <__udivmodhi4_ep>

00002906 <__udivmodhi4_loop>:
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	a6 17       	cp	r26, r22
    290c:	b7 07       	cpc	r27, r23
    290e:	10 f0       	brcs	.+4      	; 0x2914 <__udivmodhi4_ep>
    2910:	a6 1b       	sub	r26, r22
    2912:	b7 0b       	sbc	r27, r23

00002914 <__udivmodhi4_ep>:
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	5a 95       	dec	r21
    291a:	a9 f7       	brne	.-22     	; 0x2906 <__udivmodhi4_loop>
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	08 95       	ret

00002926 <__prologue_saves__>:
    2926:	2f 92       	push	r2
    2928:	3f 92       	push	r3
    292a:	4f 92       	push	r4
    292c:	5f 92       	push	r5
    292e:	6f 92       	push	r6
    2930:	7f 92       	push	r7
    2932:	8f 92       	push	r8
    2934:	9f 92       	push	r9
    2936:	af 92       	push	r10
    2938:	bf 92       	push	r11
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	ca 1b       	sub	r28, r26
    2950:	db 0b       	sbc	r29, r27
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	09 94       	ijmp

0000295e <__epilogue_restores__>:
    295e:	2a 88       	ldd	r2, Y+18	; 0x12
    2960:	39 88       	ldd	r3, Y+17	; 0x11
    2962:	48 88       	ldd	r4, Y+16	; 0x10
    2964:	5f 84       	ldd	r5, Y+15	; 0x0f
    2966:	6e 84       	ldd	r6, Y+14	; 0x0e
    2968:	7d 84       	ldd	r7, Y+13	; 0x0d
    296a:	8c 84       	ldd	r8, Y+12	; 0x0c
    296c:	9b 84       	ldd	r9, Y+11	; 0x0b
    296e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2970:	b9 84       	ldd	r11, Y+9	; 0x09
    2972:	c8 84       	ldd	r12, Y+8	; 0x08
    2974:	df 80       	ldd	r13, Y+7	; 0x07
    2976:	ee 80       	ldd	r14, Y+6	; 0x06
    2978:	fd 80       	ldd	r15, Y+5	; 0x05
    297a:	0c 81       	ldd	r16, Y+4	; 0x04
    297c:	1b 81       	ldd	r17, Y+3	; 0x03
    297e:	aa 81       	ldd	r26, Y+2	; 0x02
    2980:	b9 81       	ldd	r27, Y+1	; 0x01
    2982:	ce 0f       	add	r28, r30
    2984:	d1 1d       	adc	r29, r1
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	ed 01       	movw	r28, r26
    2992:	08 95       	ret

00002994 <_exit>:
    2994:	f8 94       	cli

00002996 <__stop_program>:
    2996:	ff cf       	rjmp	.-2      	; 0x2996 <__stop_program>
